// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  phone         String?
  email         String        @unique
  password      String?
  picture       String?
  bio           String?
  assignedTasks Task[]        @relation("TaskAssigneeRelation")
  createdTasks  Task[]        @relation("TaskCreatedByRelation")
  reportedTasks Task[]        @relation("TaskReporterRelation")
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  Comment       Comment[]
  Activity      Activity[]
  File          File[]
  UserProject   UserProject[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum UserProjectRole {
  OWNER
  ADMIN
  PM
  DEV
  TESTER
  MEMBER
}

model UserProject {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  role      UserProjectRole @default(MEMBER)
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  key         String        @unique
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  tasks       Task[]
  UserProject UserProject[]
}

model Task {
  id          String       @id @default(uuid())
  name        String
  description String
  sequence    Int
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id])
  parentId    String?
  parent      Task?        @relation("SubtaskRelation", fields: [parentId], references: [id])
  subtasks    Task[]       @relation("SubtaskRelation")
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  selected    Boolean      @default(false)

  assigneeId  String?
  assignee    User?   @relation("TaskAssigneeRelation", fields: [assigneeId], references: [id])
  reporterId  String?
  reporter    User?   @relation("TaskReporterRelation", fields: [reporterId], references: [id])
  createdById String
  createdBy   User    @relation("TaskCreatedByRelation", fields: [createdById], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(uuid())
  url       String
  name      String
  path      String
  type      String
  size      Int
  metadata  Json?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
